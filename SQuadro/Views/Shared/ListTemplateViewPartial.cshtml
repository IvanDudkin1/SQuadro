@using SQuadro.Models
@model IListTemplate
@{
    Layout = null;

    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    IHtmlString jsonFilterSettings = null;
    if (Model.FiltersSettings != null)
    {
        jsonFilterSettings = Html.Raw(Model.FiltersSettings.JsonFilterSettings);
    }

    IHtmlString jsonDefaultSorting = null;
    if (Model.DefaultSorting != null)
    {
        jsonDefaultSorting = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DefaultSorting));
    }

    IHtmlString jsonDefaultGrouping = null;
    if (Model.DefaultGrouping != null)
    {
        jsonDefaultGrouping = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.DefaultGrouping));
    }

    IHtmlString jsonInitParams = null;
    if (Model.InitParams != null)
    {
        jsonInitParams = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.InitParams));
    }
}   
<div class="container">
    <div class="row">
        <div class="col-md-9">
            @{
                if (!String.IsNullOrWhiteSpace(Model.Name))
                {
                    <h2>@Html.Raw(Model.Name)</h2>
                }
            }
        </div>
        <div class="col-md-3 pull-right">
            <div class="input-group">
                <input type="text" id="@("searchBox_{0}".ToFormat(Model.Postfix))" class="search-box form-control" placeholder="Search"/>
                <span class="input-group-btn">
                    <button type="button" id="@("clearSearch_{0}".ToFormat(Model.Postfix))" class="btn btn-default" data-toggle="tooltip" title="Clear Search"><b>x</b></button>
                </span>
            </div>
        </div>
    </div>
</div>
<div class="container list-template">
    @{
        if (Model.GlobalActionsSettings != null || Model.SelectionActionsSettings != null)
        {
            <div class="row">
                <div class="col-md-12 col-xs-12">
                    @{
                        if (Model.GlobalActionsSettings != null)
                        {
                            <div class="btn-group">
                                @{
                                    foreach (var globalActionSettings in Model.GlobalActionsSettings.GlobalActionSettingsList.Where(s => s != null))
                                    {
                                        var settings = globalActionSettings.ButtonSettings;
                                        if (settings.Visible)
                                        {
                                            <button type="button" class="btn btn-sm btn-info" data-toggle="tooltip" title="@Html.Raw(settings.Text)" onclick="@(settings.Click)">@Html.Raw(settings.Html)</button>
                                        }
                                    }
                                }
                            </div>
                        }
                        if (Model.SelectionActionsSettings != null)
                        {
                           
                            <div class="btn-group"> <div class="selectionactions-container" style="display: none">
                                @{ 
                                    foreach (var actionSettings in Model.SelectionActionsSettings.GlobalActionSettingsList.Where(s => s != null))
                                    {
                                        var settings = actionSettings.ButtonSettings;
                                        if (settings.Visible)
                                        {
                                            <button type="button" class="btn btn-sm btn-info" data-toggle="tooltip" title="@Html.Raw(settings.Text)" onclick="@(settings.Click)">@Html.Raw(settings.Html)</button>
                                        }
                                    }
                                }
                            </div></div>
                        }
                        <div class="btn-group pull-right text-right">
                            @{
                                if (Model.FiltersSettings != null)
                                {
                                    <button type="button" id="@("filters_{0}".ToFormat(Model.Postfix))" class="btn btn-sm btn-info" data-toggle="tooltip" title="Show/Hide Filters"><i class="glyphicon glyphicon-filter"></i></button>
                                    <button type="button" id="@("filters_clear_{0}".ToFormat(Model.Postfix))" class="btn btn-sm btn-info" data-toggle="tooltip" title="Clear Filters" style="text-decoration:line-through;"><i class="glyphicon glyphicon-filter"></i></button>
                                }
                            }
                            <button type="button" id="@("refresh_{0}".ToFormat(Model.Postfix))" class="btn btn-sm btn-info" data-toggle="tooltip" title="Refresh"><i class="glyphicon glyphicon-refresh"></i></button>
                        </div>
                    }
                </div>
            </div>
        }
        if (Model.FiltersSettings != null)
        {
            <div class="row filter-container" style="display:none">
                @{
                    <div class="col-md-2 hidden-sm hidden-xs"></div>
                    if (Model.FiltersSettings.Filter1Settings != null)
                    {
                        <div class="col-md-2 col-sm-6 col-xs-12 pull-right">
                            @Html.DropDownListFor(m => m.FiltersSettings.Filter1Settings.SelectedValue, Model.FiltersSettings.Filter1Settings.DataSource, new { id = Model.FiltersSettings.Filter1Settings.Name, @class = "ltGlobalFilter select2", data_default_value = Model.FiltersSettings.Filter1Settings.SelectedValue.ToString() })
                        </div>
                    }
                    if (Model.FiltersSettings.Filter2Settings != null)
                    {
                        <div class="col-md-2 col-sm-6 col-xs-12 pull-right">
                            @Html.DropDownListFor(m => m.FiltersSettings.Filter2Settings.SelectedValue, Model.FiltersSettings.Filter2Settings.DataSource, new { id = Model.FiltersSettings.Filter2Settings.Name, @class = "ltGlobalFilter select2", data_default_value = Model.FiltersSettings.Filter2Settings.SelectedValue.ToString() })
                        </div>
                    }
                    if (Model.FiltersSettings.Filter3Settings != null)
                    {
                        <div class="col-md-2 col-sm-6 col-xs-12 pull-right">
                            @Html.DropDownListFor(m => m.FiltersSettings.Filter3Settings.SelectedValue, Model.FiltersSettings.Filter3Settings.DataSource, new { id = Model.FiltersSettings.Filter3Settings.Name, @class = "ltGlobalFilter select2", data_default_value = Model.FiltersSettings.Filter3Settings.SelectedValue.ToString() })
                        </div>
                    }
                    if (Model.FiltersSettings.Filter4Settings != null)
                    {
                        <div class="col-md-2 col-sm-6 col-xs-12 pull-right">
                            @Html.DropDownListFor(m => m.FiltersSettings.Filter4Settings.SelectedValue, Model.FiltersSettings.Filter4Settings.DataSource, new { id = Model.FiltersSettings.Filter4Settings.Name, @class = "ltGlobalFilter select2", data_default_value = Model.FiltersSettings.Filter4Settings.SelectedValue.ToString() })
                        </div>
                    } 
                }
            </div>
        }
    }
    <div class="row main-grid">
        <div class="col-lg-12">
            <table id="@("ltGridView_{0}".ToFormat(Model.Postfix))" class="table table-condensed dataTable">
                <thead>
                    <tr>
                        @{
                            foreach (Column column in Model.Columns)
                            {
                                <th>
                                    @{
                                        if (column.IsSelector)
                                        {
                                            <div class="checkbox"><label><input type="checkbox" class="select-all ace" /><span class="lbl"></span></label></div>
                                        }
                                    }
                                </th>   
                            }  
                        }
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>
<script type="text/javascript">
    var selectionContainer = function(suppressEvents) {
        var that = this;
        var internalArray = [];
        var suppressEventsGlobal = suppressEvents;
            
        var addInternal = function(id, suppressEvents) {
            if (internalArray.indexOf(id) == -1)
                internalArray.push(id);
            if (!suppressEvents && !suppressEventsGlobal)
                $(document).trigger("table-selection-changed", that);
        }

        var addaddRangeInternal = function(arr) {
            var startLength = internalArray.length;
            for (var i = 0; i < arr.length; i++)
                addInternal(arr[i], true);
            if (startLength != internalArray.length && !suppressEventsGlobal)
                $(document).trigger("table-selection-changed", that);
        };
        
        var removeInternal = function(id, suppressEvents) {
            var index = internalArray.indexOf(id);
            if (index != -1)
                internalArray.splice(index, 1);
            if (!suppressEvents && !suppressEventsGlobal)
                $(document).trigger("table-selection-changed", that);
        };

        var removeRangeInternal = function(arr) {
            var startLength = internalArray.length;
            for (var i = 0; i < arr.length; i++)
                removeInternal(arr[i], true);
            if (startLength != internalArray.length && !suppressEventsGlobal)
                $(document).trigger("table-selection-changed", that);
        };

        var clearInternal = function() {
            var startLength = internalArray.length;
            internalArray.length = 0;
            if (startLength && !suppressEventsGlobal)
                $(document).trigger("table-selection-changed", that);
        };

        this.add = function(id) {
            addInternal(id);
        };

        this.addRange = function(arr) {
            addaddRangeInternal(arr);
        }; 

        this.remove = function(id, noeve) {
            removeInternal(id);
        };

        this.removeRange = function(arr) {
            removeRangeInternal(arr);
        };

        this.clear = function() {
            clearInternal();
        };

        this.getLength = function() {
            return internalArray.length;
        };

        this.any = function() {
            return internalArray.length > 0;
        };

        this.getIDs = function() {
            return internalArray;
        };
    };

    var @("listTemplate_{0}".ToFormat(Model.Postfix)) = {
        $grid: null,

        readonly: @(Model.Readonly.ToString().ToLower()),

        root: '@(Url.Content("~/"))',

        refresh: function() {
            this.$grid.fnDraw();
        },

        parentID: '@(Model.ParentID)',

        shortDatePattern: '@Html.ConvertDateFormat(System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)',

        selection: new selectionContainer(@(Model.Settings.SuppressSelectionEvents.ToString().ToLower()))
    }

    $(document).ready(function () {
        $.getScript('@(Url.Content(Model.JavaScriptFilePath))', function() {
            var listtemplate = @("listTemplate_{0}".ToFormat(Model.Postfix));
            listtemplate.$grid = $('#ltGridView_@(Model.Postfix)');
            var jsClass = @(Model.JavaScriptClassName);
            jsClass.listtemplate = listtemplate;

            listtemplate.$grid.find(':checkbox').removeProp('hidden');
            $('.date-picker').datepicker({ dateFormat: listtemplate.shortDatePattern, changeMonth: true, changeYear: true });

            var defaultSorting = [];
            var jsonDefaultSorting = '@(jsonDefaultSorting)';
            if (jsonDefaultSorting) {
                defaultSorting = $.parseJSON('@(jsonDefaultSorting)');
            }

            var defaultGrouping = [];
            var jsonDefaultGrouping = '@(jsonDefaultGrouping)';
            if (jsonDefaultGrouping) {
                defaultGrouping = $.parseJSON('@(jsonDefaultGrouping)');
            }

            var filters = [];
            var jsonFilterSettings = '@(jsonFilterSettings)';
            if (jsonFilterSettings) {
                filters = $.parseJSON(jsonFilterSettings);
            }

            var initParams;
            var jsonInitParams = '@(jsonInitParams)';
            if (jsonInitParams) {
                initParams = $.parseJSON(jsonInitParams);
                listtemplate.initParams = initParams;
            }

            listtemplate.$grid = listtemplate.$grid.dataTable({
                'sDom': "<<'hidden'l><'hidden'f>r>t<'row'<'col-md-6'i><'col-md-6'pP>>",
                'bServerSide': true,
                'iDisplayLength': 25,
                'sAjaxSource': '@(Model.DataSourceCallback)',
                'bProcessing': false,
                'bJQueryUI': false,
                'aoColumns': jsClass.getColumnsDefinition(),
                'aaSorting': defaultSorting,
                'aaSortingFixed': defaultGrouping,
                'bAutoWidth': false,
                'fnCreatedRow': function( nRow, aData, iDataIndex ) {
                    if (aData.IsGroup)
                        $(nRow).addClass('group-row');
                    else if (aData.IsTotal)
                        $(nRow).addClass('total-row');
                },
                'fnInitComplete': function(oSettings, json) {
                },
                'fnDrawCallback': function (oSettings) {
                    if (listtemplate.$grid.is('.responsive')) {
                        responsiveTables.updateTable(listtemplate.$grid);
                    }

                    checkSelection();

			        if (oSettings.aiDisplay.length == 0 || !oSettings.aaSortingFixed)
			        {
				        return;
			        }
			        var $rows = $('tbody tr', listtemplate.$grid);
			        var iColspan = $rows[0].getElementsByTagName('td').length;
			        var sGroups = [];
			        for (var i = 0; i < $rows.length; i++) {
				        var oData = this.fnGetData($rows[i]);
                        for (var j = 0; j < oSettings.aaSortingFixed.length; j++) {
		                    var oCol = oSettings.aoColumns[oSettings.aaSortingFixed[j][0]];
                            var sGroup = oCol.fnGetData(oData, 'display');
				            if (sGroup != sGroups[j]) {
					            var nGroup = document.createElement( 'tr' );
					            var nCell = document.createElement( 'td' );
					            nCell.colSpan = iColspan;
					            nCell.className = "group";
					            nCell.innerHTML = (oCol.sTitle ? oCol.sTitle + ' - ' : '') + sGroup;
                                $(nCell).css('padding-left', 10 * (j + 1) + 'px'); 
					            nGroup.appendChild( nCell );
					            $rows[i].parentNode.insertBefore(nGroup, $rows[i]);
					            sGroups[j] = sGroup;
				            }
                        }
			        }
		        },
                'fnServerData': function ( sSource, aoData, fnCallback ) {
                    /* Add some extra data to the sender */
                    /* filters */
                    for (var i = 0; i < filters.length; i++) {
                       aoData.push( { 'name': filters[i].Name, 'value': $('#' + filters[i].Name).val() } );
                    };

                    /* initParams */
                    if (initParams) {
                        for (var key in initParams) {
                            if (initParams.hasOwnProperty(key)) {
                                var obj = initParams[key];
                                aoData.push( { 'name': key, 'value': obj } );
                            }
                        }
                    };

                    /*date filters*/;
                    var dateFilterFrom = '@(Model.DateFilterSettings.NameFrom)';
                    var $dateFilterFrom = $('#' + dateFilterFrom);
                    if ($dateFilterFrom.length)  
                        aoData.push( { 'name': dateFilterFrom, 'value': $dateFilterFrom.datepicker('getDate').toUTCString() } );

                    var dateFilterTo = '@(Model.DateFilterSettings.NameTo)';
                    var $dateFilterTo = $('#' + dateFilterTo);
                    if ($dateFilterTo.length)
                        aoData.push( { 'name': dateFilterTo, 'value': $dateFilterTo.datepicker('getDate').toUTCString() } );

                    /*parent ID*/
                    aoData.push( { 'name': 'parentID', 'value': '@(Model.ParentID)' });

                    //var $ajaxLoader = new ajaxLoader($('body'));
                    $("body").css("cursor", "progress");

                    $.ajax({
                        "dataType" : 'json',
                        "type" : "POST",
                        "url" : sSource,
                        "data" : aoData,
                        "complete": function () {
                            //$ajaxLoader.remove();
                            $("body").css("cursor", "default");
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            if (XMLHttpRequest.status === 401) {
                                location.reload();
                            }
                        },
                        "success" : function(json) {
                            fnCallback(json);
                        }
                    });
                }
            });

            var $searchBox = $('#searchBox_@(Model.Postfix)');
            var $clearSearch = $('#clearSearch_@(Model.Postfix)');
            var $refresh = $('#refresh_@(Model.Postfix)');
            var $filtersButton = $('#filters_@(Model.Postfix)');
            var $filtersClearButton = $('#filters_clear_@(Model.Postfix)');

            $(window).bind('resize', function () {
                listtemplate.$grid.fnAdjustColumnSizing();
            });

            listtemplate.$grid.on("click", "thead th", function (e) {
                function getColumnIndex(domColumnIndex, aoColumns) {
                    var k = -1;
                    for (var i = 0; i < aoColumns.length; i++) {
                        if (aoColumns[i].bVisible) k++;
                        if (k == domColumnIndex) return i;
                    }
                    return -1;
                }

                function getSorting(aaSortingFixed, colIndex) {
                    for (var i = 0; i < aaSortingFixed.length; i++) {
                        if (aaSortingFixed[i][0] == colIndex) return aaSortingFixed[i];
                    }
                }

                var evt = e ? e: window.event;
                if (evt.shiftKey) {
                    var oSettings = listtemplate.$grid.fnSettings();
                    var colIndex = getColumnIndex($(this).index(), oSettings.aoColumns);
                    if (colIndex == -1) return;
                    var oCol = oSettings.aoColumns[colIndex];
                    if (!oCol.bGroupable) return;
                    var sortMode = 'asc';
                    if (oCol.sType == 'date') sortMode = 'desc';
                    if (!oSettings.aaSortingFixed) {
                        oSettings.aaSortingFixed = [];
                        oSettings.aaSortingFixed.push([colIndex, sortMode]);
                    }
                    else
                    {
                        var aSortingFixed = getSorting(oSettings.aaSortingFixed, colIndex);
                        if (aSortingFixed) {
                            if (aSortingFixed[1] == 'asc' && oCol.sType != 'date')
                                aSortingFixed[1] = 'desc';
                            else if (aSortingFixed[1] == 'desc' && oCol.sType == 'date')
                                aSortingFixed[1] = 'asc';
                            else // remove grouping
                                oSettings.aaSortingFixed.splice(oSettings.aaSortingFixed.indexOf(aSortingFixed), 1);
                        }
                        else {
                            oSettings.aaSortingFixed.push([colIndex, sortMode]);
                        }
                    }
                }
            });

            $(document).on('table-selection-changed', function(event, container) {
                if (container.any())
                    listtemplate.$grid.closest('.list-template').find('.selectionactions-container').slideDown('slow');
                else {
                    listtemplate.$grid.closest('.list-template').find('.selectionactions-container').slideUp('slow');
                    $('.select-row:checked', listtemplate.$grid).prop('checked', false);
                    $('.select-all', listtemplate.$grid).prop('checked', false);
                }
            });
            
            listtemplate.$grid.on('change', '.select-all', function (e) {
                var data = listtemplate.$grid.fnGetData();
                var ids = [];
                for (var i = 0; i < data.length; i++)
                    ids.push(data[i].ID);

                var $this = $(this);
                var $rowChecks = $('.select-row', listtemplate.$grid);
                if ($this.is(':checked')) {
                    listtemplate.selection.addRange(ids);
                    $rowChecks.prop('checked', true);
                    
                }
                else
                {
                    listtemplate.selection.removeRange(ids);
                    $rowChecks.prop('checked', false);
                }
            });

            listtemplate.$grid.on("change", ".select-row", function (e) {
                var $row = $(this).closest('tr');
                var data = listtemplate.$grid.fnGetData($row[0]);
                if (this.checked)
                    listtemplate.selection.add(data.ID);
                else
                    listtemplate.selection.remove(data.ID);
                
                checkSelectAll(); 
            });

            function checkSelection() {
                if (listtemplate.selection.any()) {
                    var selectedIDs = listtemplate.selection.getIDs();
                    listtemplate.$grid.$('tr').each(function() {
                        var $row = $(this);
                        var data = listtemplate.$grid.fnGetData(this);
                        if (selectedIDs.indexOf(data.ID) != -1)
                            $('.select-row', $row).prop('checked', true);
                    });
                    checkSelectAll();
                }
            };

            function checkSelectAll() {
                var $rowChecks = $('.select-row', listtemplate.$grid);
                var $checkAll = $('.select-all', listtemplate.$grid);
                if ($rowChecks.not(':checked').length) {
                    if ($checkAll.is(':checked')) {
                        $checkAll.prop('checked', false);
                    }
                }
                else {
                    if (!$checkAll.is(':checked')) {
                        $checkAll.prop('checked', true);
                    }
                }
            }

            listtemplate.$grid.fnGetSelectedIds = function() {
	            return listtemplate.selection.getIDs();
            };

            if (jsClass.tableInitialized)
                jsClass.tableInitialized();


            $searchBox.bind('keyup', function(e) {
                var filter = $(this).val();
                listtemplate.$grid.fnFilter(filter);
            });

            $clearSearch.click(function () {
                if ($searchBox.val()) {
                    $searchBox.val('');
                    listtemplate.$grid.fnFilter('');
                    $searchBox.focus();
                }
            });

            $refresh.click(function() {
                listtemplate.refresh();
            });

            $filtersButton.click(function() {
                $(this).closest('.list-template').find('.filter-container').slideToggle();
            });

            $filtersClearButton.click(function() {
                $(this).closest('.list-template').find('select.ltGlobalFilter').each(function() {
                    var $this = $(this);
                    $this.select2('val', $this.attr('data-default-value'));
                });
                setTimeout(function() {
                    listtemplate.refresh(); }, 100);
            });

            $(".ltGlobalFilter").change(function() {
                 listtemplate.refresh();
            });

            $searchBox.focus();
        });
    });
</script>
